#!/bin/bash

# 
# NAGIOS RETURN CODES
# -------------------
#
# 0: OK
# 1: WARNING
# 2: CRITICAL
# 3: UNKNOWN
#
# NAGIOS OUTPUT FORMAT
# --------------------
# 
# "check_name check_status - check_text|check_perfdata"
#
# NAGIOS PERFDATA FORMAT
# ----------------------
#
# see https://nagios-plugins.org/doc/guidelines.html#AEN200
# label=value[UOM];[warn];[crit];[min];[max]
#

# needed binaries
AWK=$(which awk)
BC=$(which bc)
function bc_expr(){ echo "scale=2;${1}"|${BC}; }

CURL=$(which curl)
JQ=$(which jq)
TR=$(which tr)
GREP=$(which grep)

#
# default options
#
OPT_ADDRESS="127.0.0.1"
OPT_PORT="9050"
OPT_URL="https://www.veruscoin.io"
OPT_WARN="5"
OPT_CRIT="10"

function check_usage() {
        echo " " 1>&2
        echo "${0} usage: ${0} [-a <address>] [-p <port>] [-u <url>] [-w <warn>] [-c <crit>]" 1>&2
        echo " " 1>&2
        echo "  - default address/port is ${OPT_ADDRESS}:${OPT_PORT}. " 1>&2
        echo "  - default URL is ${OPT_URL}." 1>&2
        echo " " 1>&2
        echo "for more information, see " 1>&2
        echo "  ${0} -h" 1>&2
        echo " " 1>&2

        exit 3;
}

function check_help() { 
        echo " " 1>&2
        echo "$(basename ${0}) usage: ${0} [OPTION ...]" 1>&2
        echo " " 1>&2
        echo "$(basename ${0}) - check wether TOR connection is alive"  1>&2
        echo " " 1>&2
        echo "Examples: " 1>&2
        echo "  ${0} -a 127.0.0.8 -p 9051 -u \"https://www.torproject.org\" # check TOR SocksPort at \"127.0.0.8:9051\", using https://www.torproject.org to test connectivity." 1>&2
        echo "  ${0} -w 10 -c 30                                          # check default TOR SocksPort using default URL with Warning threshold of 10s, Crticial threshold of 30s." 1>&2
        echo " " 1>&2
        echo "Per default, the SocksPort at \"${OPT_ADDRESS}:${OPT_PORT}\" will be used to call \"${OPT_URL}\". Latency >5s is WARN, >10s is CRIT." 1>&2
        echo " " 1>&2
        echo "Options: " 1>&2
        echo "    -a <address>    Address of TOR SocksPort" 1>&2
        echo "    -p <port>       Port of TOR SocksPort" 1>&2
        echo "    -u <url>        URL to test TOR connectivity with" 1>&2
        echo "    -w <warn>       Warning threshold for latency" 1>&2
        echo "    -c <crit>       Critical threshold for latency" 1>&2
        echo " " 1>&2

        exit 3;
}

#
# parse commandline options
#
while getopts "a:hp:u:" OPT; do
        case "${OPT}" in
                h)
                        check_help
                        ;;
                a)
                        OPT_ADDRESS="${OPTARG}"
                        ;;
                p)
                        OPT_PORT="${OPTARG}"
                        ;;
                u)
                        OPT_URL="${OPTARG}"
                        ;;
                *)
                        check_usage
                        ;;
        esac
done
shift $((OPTIND-1))

# collect data
TIME_START=$(date +%s%N)
REQUEST=$(${CURL} --socks5 ${OPT_ADDRESS}:${OPT_PORT} --silent "${OPT_URL}" >/dev/null && echo -n OK)
TIME_STOP=$(date +%s%N)

# nanosecond resolution, divide by 1.000.000.000
TIME_DURATION=$(echo "scale=3;(${TIME_STOP}-${TIME_START})/1000000000"|${BC}|${AWK} '{printf "%.3f", $0}')

# prepare output
CHECK_NAME="TOR"

# determine status
# output empty = unknown
if [ -z "${REQUEST}" ]; then
	CHECK_STATUS="UNKNOWN"
	CHECK_TEXT="Unexpected data"
	CHECK_PERFDATA="tor_connected=0"
	CHECK_RETURN=3
# equal output = OK
elif [ "${REQUEST}" == "OK" ]; then
	if [ $(bc_expr "${TIME_DURATION}>=${OPT_WARN}")  -eq "1" ]; then
		CHECK_STATUS="WARN"
		CHECK_TEXT="High Latency"
		CHECK_PERFDATA="tor_connected=1"
		CHECK_RETURN=1
	fi
	if [ $(bc_expr "${TIME_DURATION}>=${OPT_CRIT}")  -eq "1" ]; then
		CHECK_STATUS="CRIT"
		CHECK_TEXT="Critical Latency"
		CHECK_PERFDATA="tor_connected=1"
		CHECK_RETURN=2
	fi
	if [ $(bc_expr "${TIME_DURATION}<${OPT_WARN}") -eq "1" ]; then
		CHECK_STATUS="OK"
		CHECK_TEXT="Connected to TOR network"
		CHECK_PERFDATA="tor_connected=1"
		CHECK_RETURN=0
	fi
else
    CHECK_STATUS="CRIT"
    CHECK_TEXT="NOT connected to TOR network"
    CHECK_PERFDATA="tor_connected=0"
    CHECK_RETURN=3
fi

CHECK_PERFDATA="${CHECK_PERFDATA} tor_latency=${TIME_DURATION}"
CHECK_TEXT="${CHECK_TEXT}, Latency: ${TIME_DURATION}s"

# output
echo -n "${CHECK_NAME} ${CHECK_STATUS} - ${CHECK_TEXT}|${CHECK_PERFDATA}"
exit ${CHECK_RETURN}

# EOF

