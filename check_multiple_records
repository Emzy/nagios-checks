#!/bin/bash

#
# return 0 = OK
# return 1 = WARNING
# return 2 = CRITICAL
# return 3 = UNKNOWN
#

AWK=$(which awk || echo "${0} 'awk' not found, exiting!"; exit 3)
HOST=$(which host || echo "${0} 'host' not found, exiting!"; exit 3)
IFCONFIG=$(test -x /sbin/ifconfig && echo "/sbin/ifconfig" || echo "${0} 'ifconfig' not found, exiting!"; exit 3)


#
# CHECK CONFIG
# 
CHECK_TITLE="check_multiple_records"
OPT_RECORD_TYPE="A"
OPT_INTERFACE=""
OPT_EXPECTATION="127.0.0.1"
OPT_WARN=0
OPT_MATCH_ALL=0
OPT_RECORDS=""
MATCHING_RECORDS=""

function check_usage() {
	echo " " 1>&2
	echo "${0} usage: ${0} [-1..-9 <record1..record9>] [-t <record_type>] [-s <dns_server>] ([-i <interface>]|[-c <comparison>]) [-w] [-a]" 1>&2
	echo " " 1>&2
	echo "for more information, see " 1>&2
	echo "  ${0} -h" 1>&2
	echo " " 1>&2

	exit 3;
}

function check_help() { 
	echo " " 1>&2
	echo "$(basename ${0}) usage: ${0} [OPTION ...]" 1>&2
	echo " " 1>&2
	echo "$(basename ${0}) - checks a given comparison value against up to nine given DNS records of a given type" 2>&1
	echo " " 1>&2
	echo "Examples: " 1>&2
	echo "  ${0} -t A -1 web0.acme.com -2 web1.acme.com -c 1.2.3.4 # check wether any of \"web0.acme.com web1.acme.com\" matches 1.2.3.4" 2>&1
	echo "  ${0} -t AAAA -1 web0.acme.com -i eth0 -w               # check wether \"web0.acme.com\" resolved to the IPv6 address of eth0, only WARNing if not" 2>&1
	echo " " 1>&2
	echo "Options: " 1>&2
	echo "    -1..-9 <record>  DNS record to resolve, up to 9 in total. first one is mandatory." 1>&2
	echo "    -c <comparison>  Result to compare to" 1>&2
	echo "    -s <dns_server>  DNS server to talk to" 1>&2
	echo "    -i <interface>   Primary address of interface to use as expected result (use with -t AAAA for IPv6)" 1>&2
	echo "    -t <record_type> Record type to check for (defaults to A)" 1>&2
	echo "    -a               All checked records need to match (default: only one needs to match)" 1>&2
	echo "    -w               WARN only when DNS/Address mismatches (default: CRIT)" 1>&2
	echo " " 1>&2
			echo "NOTE: using '-i' will only match the first public/global address of the given interface!" 2>&1
	echo " " 1>&2

	exit 3;
}

#
# parse commandline options
#
if [ -z "${1}" ]; then
	check_usage
	exit 3;
fi

OPT_RECORDS=""
while getopts "1:2:3:4:5:6:7:8:9:i:c:t:s:awh" OPT; do
	case "${OPT}" in
		[1-9])
			OPT_RECORDS="${OPT_RECORDS}${OPTARG} "
			OPT_NUM=${OPT}
			;;
		i)
			OPT_INTERFACE="${OPTARG}"
			OPT_COMPARISON="$(${IFCONFIG} ${OPT_INTERFACE} | grep 'inet' | xargs echo | cut -d" " -f2)"
			;;
		c)
			OPT_COMPARISON="${OPTARG}"
			;;
		t)
			OPT_RECORD_TYPE="${OPTARG}"
			;;
		s)
			OPT_DNS_SERVER="${OPTARG}"
			;;
		a)
			OPT_MATCH_ALL=1
			;;
		w)
			OPT_WARN=1
			;;
		h)
			check_help
			;;
		*)
			check_usage
			;;
	esac
done
shift $((OPTIND-1))

if [ "${OPT_RECORD_TYPE}" == "AAAA" ] && [ ! -z "${OPT_INTERFACE}" ]; then
	OPT_COMPARISON=$(${IFCONFIG} ${OPT_INTERFACE} | grep 'inet6.*global.*' | xargs echo | cut -d" " -f2)
fi

#	CHECK_DATA=$(${HOST} -t ${OPT_RECORD_TYPE} ${OPT_RECORD} ${OPT_DNS_SERVER}|${AWK} '{print $4}'|xargs echo)

for RECORD in ${OPT_RECORDS}; do
	if [ "${OPT_RECORD_TYPE}" == "AAAA" ]; then
		RECORD_DATA=$(${HOST} -t ${OPT_RECORD_TYPE} ${RECORD} ${OPT_DNS_SERVER}|${AWK} '{print $5}'|xargs echo)
	#elif [ "${OPT_RECORD_TYPE}" == "A" ]; then
	else
		RECORD_DATA=$(${HOST} -t ${OPT_RECORD_TYPE} ${RECORD} ${OPT_DNS_SERVER}|${AWK} '{print $4}'|xargs echo)
	fi

	if [ ! -z $(echo ${RECORD_DATA}|grep ${OPT_COMPARISON}) ]; then
		MATCHING_RECORDS="${MATCHING_RECORDS}${RECORD} "
	fi
done
NUM_MATCHES="$(echo ${MATCHING_RECORDS}|wc -w)"

#
# https://nagios-plugins.org/doc/guidelines.html#AEN200
# 'label'=value[UOM];[warn];[crit];[min];[max]
# UOM (unit of measurement) is one of:
#    no unit specified - assume a number (int or float) of things (eg, users, processes, load averages)
#    s - seconds (also us, ms)
#    % - percentage
#    B - bytes (also KB, MB, TB)
#    c - a continous counter (such as bytes transmitted on an interface)
#
MATCHING_RECORDS="$(echo ${MATCHING_RECORDS})"
CHECK_PERFDATA="record_type=${OPT_RECORD_TYPE} matches=\"${MATCHING_RECORDS}\" comparison=\"${OPT_COMPARISON}\" match_all=${OPT_MATCH_ALL}"
if [ ! -z "${OPT_DNS_SERVER}" ]; then
	CHECK_PERFDATA="${CHECK_PERFDATA} dns_server=${OPT_DNS_SERVER}"
fi

#
# return 0 = OK
# return 1 = WARNING
# return 2 = CRITICAL
# return 3 = UNKNOWN
#
CHECK_STATUS=3
CHECK_STATUS_TEXT="UNKOWN"

# no matching records is problematic
if [ -z "${MATCHING_RECORDS}" ]; then
	MESSAGE="None of \"${OPT_RECORDS::-1}\" matches \"${OPT_COMPARISON}\"!"
	if [ "${OPT_WARN}" -eq 1 ]; then
		CHECK_STATUS=1
		CHECK_STATUS_TEXT="WARN"
	else
		CHECK_STATUS=2
		CHECK_STATUS_TEXT="CRIT"
	fi
else
	# match all given
	if [ "${OPT_MATCH_ALL}" -eq 1 ]; then
		# nope
		if [ "${NUM_MATCHES}" -lt "${OPT_NUM}" ]; then
			MESSAGE="Only \"${MATCHING_RECORDS::-1}\" (${NUM_MATCHES}/${OPT_NUM}) match \"${OPT_COMPARISON}\", but matching all of \"${OPT_RECORDS}\" is required!"
			if [ "${OPT_WARN}" -eq 1 ]; then
				CHECK_STATUS=1
				CHECK_STATUS_TEXT="WARN"
			else
				CHECK_STATUS=2
				CHECK_STATUS_TEXT="CRIT"
			fi
		fi
	else	
		MESSAGE="\"${OPT_COMPARISON}\" matches"
		if [ "${OPT_MATCH_ALL}" -eq "1" ]; then
			MESSAGE="${MESSAGE} all of \"${OPT_RECORDS}\"!"
		else
			MESSAGE="${MESSAGE} ${MATCHING_RECORDS}!"
		fi
		CHECK_STATUS=0
		CHECK_STATUS_TEXT="OK"
	fi
fi


# Output result
# exit with proper code
#
echo "${CHECK_TITLE}/${OPT_COMPARISON} ${CHECK_STATUS_TEXT} - ${MESSAGE}|${CHECK_PERFDATA}"
exit ${CHECK_STATUS}

